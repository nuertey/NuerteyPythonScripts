====================================
My Google Drive Music Links For Wayo
====================================

Revolution OS Documentary Movie About Linux and Open Source Software Movement:

https://drive.google.com/file/d/1f136r79FH4GIj9r0zA5o8eZ0_9AeYhg2/view?usp=sharing

============
Music Links:
============
Beethoven- Piano Concerto No. 5 'Emperor'
https://drive.google.com/file/d/1f136r79FH4GIj9r0zA5o8eZ0_9AeYhg2/view?usp=sharing

Yo-Yo Ma plays Ennio Morricone [Classical, Cello]
https://drive.google.com/drive/folders/1DmJXsCe7g_OG3kM7LEW2BfKTvvdQDj6H?usp=sharing

Assortment of Excellent Music and Lullabies For Adults, Kids and Babies Alike
https://drive.google.com/drive/folders/1uPy3y2N76lD0hJokeh5O1JWzEzbvvSUV?usp=sharing

Nature's Symphonies - Bubbling Brook [Classical Piano Backgrounded with Sound of Flowing Stream]
https://drive.google.com/drive/folders/1M6gJwder1QztyUPkXTAEtdSGi31HWnWM?usp=sharing

Nature's Symphonies - Rhythm of The Rain [Classical Piano with THe Sound of The Rain]
https://drive.google.com/drive/folders/1TBgilQpdkPWk39QGgkX5p5ztxasLVC9X?usp=sharing

Nature's Symphonies - Sounds Of the Night [Classical Piano Backgrounded with Sounds of The Night]
https://drive.google.com/drive/folders/1IVfZ3FKK2o6-G7yyQwSQ52j0vWjAYDhF?usp=sharing

More Nuertey Music
https://drive.google.com/drive/folders/1wAUwt8uB6j-1pdSCvvN6j8_MdF8qTq-f?usp=sharing

The Great Beauty (La Grande Bellezza) Soundtrack CD 1
https://drive.google.com/drive/folders/1Y_FOZX6cbzgV2wkt1tGLQqkbNqv7kUCp?usp=sharing

The Rough Guide To The Music Of Madagascar - 2005
https://drive.google.com/drive/folders/1lByYtl1cBimDNgkv9geen0BhoQVO8lOE?usp=sharing

The Rough Guide to the Music of Okinawa
https://drive.google.com/drive/folders/1-6UPO92t-gHgFhCmGfyHtAe9Y-iQnNRe?usp=sharing


=======================================
Ubuntu 20.04 LTS (Focal Fossa) released:
=======================================
The 20.04 long-term support (LTS) release of Ubuntu, code named "Focal Fossa", is out. There are desktop and server editions, as well as all of the different Ubuntu flavors: Ubuntu Budgie, Kubuntu, Lubuntu, Ubuntu Kylin, Ubuntu MATE, Ubuntu Studio, and Xubuntu. "The Ubuntu kernel has been updated to the 5.4 based Linux kernel, with additional support for Wireguard VPN, AUFS5, and improved support for IBM, Intel, Raspberry Pi and AMD hardware. [...] 20.04 LTS also brings support for installing an Ubuntu desktop system on top of ZFS. The latest version brings performance enhancements and optional encryption support. Zsys, Ubuntuâ€™s ZFS system tool, provides automated system and user state saving. Tight integration with GRUB allows a user to revert to any system state on boot and go back in time to pave the way to a bulletproof Ubuntu Desktop." More information can be found in the release notes. 

https://lwn.net/Articles/818525/
==============================
Wayo's System Characteristics:
==============================
https://www.walmart.com/ip/3-40-HDMI-i5-8250U-RAM-Design-7350-PCIe-FP-Metal-USB-C-DP-WebCam-Full-13-3-8GB-Body-1TB-NVMe-LinuxBook-Quad-Core-SSD-Laptop-GHz-KB-Linux-Backlit-Read/295391384?selected=true

Mytrix LinuxBook 7350, 13.3" Full HD Slim Laptop, i5-8250U Quad-Core up to 3.40 GHz, 8GB RAM, 1TB PCIe NVMe SSD, USB-C/DP, HDMI, Backlit KB, FP Reader, WebCam, Metal Body Design, Linux

Processor Model
Intel 8th Gen Core i5-8250U

# of Cores
4

Max Turbo Frequency
3.40 GHz

Processor Base Frequency
1.60 GHz

Graphics
Intel UHD Graphics 620 (built-in)

Graphics RAM
Shared Memory

Screen Size
13.3 inches

Screen Resolution
Full HD (1920 x 1080)

Interface
1x USB 3.1 Gen 1 Type-C (5 Gb/s signaling rate, Power Delivery, DisplayPort Video Output)
2x USB 3.0 Gen 1 Type-A (Data Transfer Only)
1x AC smart pin
1x HDMI Video Output
1x headphone/microphone combo

Connectivity
Realtek Wi-Fi 5 (2x2)
Bluetooth 5.0

Dimensions
31.4 x 21.6 x 1.48 cm

Weight
1.2 kg

Operating system
Linux Ubuntu 20.04 LTS

    A stylish and slim but powerful Intel Core i5 subnotebook (Linux Ubuntu 20.04 LTS) full aluminum body with plenty of power and battery life in the tank. Pre-Installed Libre Office 2020, fully compatible with all your existing Word, Excel, PowerPoint documents, and even database, picture and PDF editing
    Intel Core i5-8250U (1.60 GHz base clock, Up to 3.40 GHz max boost clock) Smart Quad-core, eight-way processing performance for FHD-quality computing. Intel UHD Graphics 620 built-in graphic with Windows 10 Home. Built-in Intel UHD Graphics 620 built-in graphic
    Featuring with 13.3" Narrow Bezel diagonal Full HD (1920 x 1080), 16:9, 220 nit. Backlit keyboard allows you to enjoy comfortable and accurate typing, even in dim lighting with built-in fingerprint sensor and touchpad
    Comprehensive connections including 1x USB 3.1 Type-C (with DisplayPort video output), 2x USB 3.0 Type-A, 1x HDMI, 1x MicroSD card reader. 31.4 x 21.6 x 1.48 cm, 1.2 kg
    With Wi-Fi (802.11ac) and Bluetooth combo, you

Specifications
Processor Type  
8th Generation Intel
Processor Speed 
1.60 GHz
Wireless Technology 
Realtek Wi-Fi 5 (2x2) & Bluetooth 5.0
RAM Memory  
8.00 GB
Operating System    
linux
Screen Size 
13.30"
Brand   
mytrix

==================================
Nuertey's Instructions Beginning :
==================================

# Lets query the system first to see its capabilities and whether it fits
# what you ordered. That is, always know thy system. These commands will
# be saved in your history so that you can always refer to them and use
# them if you have to debug some other system:

Use the GNOME Dash to pull up a terminal. We will stick it permanently to the Taskbar/Launcher after this so that next time getting a terminal is just a click. Type Terminal.

Right-click on the Terminal and choose Lock to Launcher. It will now always be there. If there is a terminal open, there will be a dash to the left hand side of it, as many dashes as terminals. Otherwise no dashes.

In the terminal window, type:

whoami
groups

# In Linux program permissions are allowed or disallowed not just by user for that would mean all potential users that could use the laptop would have to be in the system and this would be an inefficient design, but by the groups that they belong to. Essentially everyone in the family for example can create their own account on the laptop and have their own programs and settings and homepage, passwords etc, and none will see each others work or step over each other. You see the thoughtfulness in the design of Linux?
 
man groups

uname -a
lsb_release -a

cat /proc/cpuinfo 

cat /proc/devices

lspci -vv

# Disk partitions and find out how much disk space do I have on each:
sudo lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL

# Current disk partition in use:
df -P ./ | tail -1 | cut -d' ' -f 1

# As we are confident in what our system is now, installations can now begin:
sudo apt update
sudo apt install geany gedit meld git tree cscope git-extras cscope python-pygments

touch ~/.lessfilter
geany ~/.lessfilter

# Add the following contents and save:

#!/bin/sh
case "$1" in
    *.awk|*.groff|*.java|*.js|*.m4|*.php|*.pl|*.pm|*.pod|*.sh|\
    *.ad[asb]|*.asm|*.inc|*.[ch]|*.[ch]pp|*.[ch]xx|*.cc|*.hh|\
    *.lsp|*.l|*.m|*.pas|*.p|*.xml|*.xps|*.xsl|*.axp|*.ppd|*.pov|\
    *.diff|*.patch|*.py|*.rb|*.sql|*.ebuild|*.eclass)
        pygmentize -f 256 "$1";;

    .bashrc|.bash_aliases|.bash_environment)
        pygmentize -f 256 -l sh "$1";;

    *)
        if grep -q "#\!/bin/bash" "$1" 2> /dev/null; then
            pygmentize -f 256 -l sh "$1"
        else
            exit 1
        fi
esac

exit 0


# Make the new bash script executable:
sudo chmod a+x ~/.lessfilter

# Add the following to the .bashrc file. Whilst there do the other things
# below too, so can do it all in one step as shown later below:
export LESS='-R'
export LESSOPEN='|~/.lessfilter %s'

#increase bash history to infinite
#setup title shortcut for bash shell terminals. To accomplish,
# add the following to .bashrc
geany ~/.bashrc

HISTSIZE=
HISTFILESIZE=

# ...

title(){
  ORIG=$PS1
  TITLE="\e]2;$@\a"
  PS1=${ORIG}${TITLE}
}

export CSCOPE_EDITOR=gedit
export LESS='-R'
export LESSOPEN='|~/.lessfilter %s'

# After file saved and closed:
source ~/.bashrc

# Test our changes out:
title "WAYO's FIRST UBUNTU SHELL"


# To see the kernel ring buffer and thus the logs indicating how the system 
# booted up each single piece of hardware. Dont worry if you dont understand 
# any of this. You will never go in here. Just showing you that even all the
# startup logs for all the hardware are available to you if you want to study
# or peruse them.
dmesg

# To see it page by page, pipe output to "less" or "more":
dmesg --human --color=always

# Or use the short version:
dmesg -H

# Alternatively, there is also this:
dmesg --color=always | less -R

# Note that many other utilities that produce colored output (ls, grep, etc.) 
# have a similar --color=always option.

============================================
Browser Plugins:
uBlock Origin
Adblock Plus
Fireshot Capture Page
Link Gopher

FireFox Browser Config -> Open Menu -> Preferences -> 
 - Restore previous session
  - Warn you when quitting the browser
 - Tabs (all 3 checked)

 Home
  - Homepage & Tabs; change to Blank Page; you dont want these popup info things to disturb your concentration when you are in the zone. That is another bad thing that Windows does. There is always some popup or ding sound to startle your mind and affect how your mind itself absorbs information efficiently. We want to get you in the zone and working perfectly!

 Privacy & Security -> Logins and Passwords
  - Ask to save logins and passwords for websites

Restart browser now so that all the plugins can better take effect. 

Foxit PDF Reader
Setup ThunderBird Email Client

https://help.ubuntu.com/stable/ubuntu-help/sharing-desktop.html.en

mkdir Workspace
cd Workspace
git clone https://jonelo.github.io/bashberries/
git clone https://github.com/aviaryan/utility-bash-scripts.git 
git clone https://github.com/ruanyf/simple-bash-scripts.git 

git clone https://github.com/arcayi/myBooks.git Books_Library
cd Books_Library

# Too see all the books you have just downloaded and can study or reference
# at your leisure pleasure, issue the first command below, or the second 
# one to see it page by page:
tree 
tree |more

--------------------------------
# also isgit bash script and other useful bash scripts: 
# Save in ~/ and change Permissions to executable:
cd ~
ls -l isgit
sudo chmod a+x isgit

# Try it out:
isgit <replace with any filename>
cd Workspace/utility-bash-scripts
isgit <replace with any filename>

rena@PurpleOS:~$ echo $PATH
/opt/ros/kinetic/bin:/home/rena:/home/rena/opt:/home/rena/Workspace/Workspace:/home/rena/Workspace/jwt-cpp/include:/home/rena/Workspace/nanopb-0.3.9.1-linux-x86/generator/proto:/home/rena/Qt5.10.1/Tools/QtCreator/bin:/home/rena/Qt5.10.1/5.10.1/gcc_64/bin:/usr/local/include:/usr/include:/usr/include/postgresql:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-11-oracle/bin:/usr/lib/jvm/java-11-oracle/db/bin

rena@PurpleOS:~$ ls -ll ./Workspace/Workspace/isgit
-rwxrwxr-x 1 rena rena 1061 Mar 26 23:39 ./Workspace/Workspace/isgit

======================================================================
CSCOPE - Browse all source files on your computer for snippets of code

Another powerful and fast shortcut when coding in any language. I dont
even  bother with IDEs like Eclipse or VisualStudio or Whatnots. Just
old-school cscope and geany editor and I am set.
======================================================================
# CSCOPE setup and usage; add .py .js other languages that he is interested in files 
cd ~
mkdir cscope
cd cscope
touch find_files.sh

rena@PurpleOS:~/cscope$ geany find_files.sh 
#!/bin/bash

find /home/rena/Workspace -follow -name "*.c" > /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.h" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.hpp" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.cpp" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.hh" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.cc" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.c++" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.capnp" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.m" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.pro" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "Makefile" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "Makefile*.*" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.json" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.py" >> /home/rena/cscope/cscope.files
find /home/rena/Workspace -follow -name "*.js" >> /home/rena/cscope/cscope.files
find /usr/local/boost_1_66_0/libs -follow -name "*.c" >> /home/rena/cscope/cscope.files
find /usr/local/boost_1_66_0/libs -follow -name "*.h" >> /home/rena/cscope/cscope.files
find /usr/local/boost_1_66_0/libs -follow -name "*.hpp" >> /home/rena/cscope/cscope.files
find /usr/local/boost_1_66_0/libs -follow -name "*.cpp" >> /home/rena/cscope/cscope.files
find /usr/local/boost_1_66_0/libs -follow -name "*.hh" >> /home/rena/cscope/cscope.files
find /usr/local/boost_1_66_0/libs -follow -name "*.cc" >> /home/rena/cscope/cscope.files
find /usr/local/boost_1_66_0/libs -follow -name "*.c++" >> /home/rena/cscope/cscope.files
find /usr/include -follow -name "*.c" >> /home/rena/cscope/cscope.files
find /usr/include -follow -name "*.h" >> /home/rena/cscope/cscope.files
find /usr/include -follow -name "*.hpp" >> /home/rena/cscope/cscope.files
find /usr/include -follow -name "*.cpp" >> /home/rena/cscope/cscope.files
find /usr/include -follow -name "*.hh" >> /home/rena/cscope/cscope.files
find /usr/include -follow -name "*.cc" >> /home/rena/cscope/cscope.files
find /usr/include -follow -name "*.c++" >> /home/rena/cscope/cscope.files

# Save file and close it.
===============================

*** In the future when Wayo needs/wants/is ready for C++ and C, we will
*** setup the GCC/G++ compiler then. For now, not to worry as we dont need it yet.
=============================================

Affix the terminal permanently to the taskbar
Affix the terminal permanently to the taskbar

============
GIT CONFIG :
============
# copy over my .gitconfig to him, and update to reflect his github information.

rena@PurpleOS:~$ pwd
/home/rena

rena@PurpleOS:~$ cat .gitconfig
[merge]
    tool = meld
[diff]
    #tool = meld
    #external = meld

[mergetool "meld"]
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
 
[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[difftool]
    prompt = false

[mergetool]
    prompt = false
[user]
    email = nuertey_odzeyem@hotmail.com
    name = Nuertey Odzeyem
[core]
    editor = gedit
    compression = 0
    packedGitLimit = 512m
    packedGitWindowSize = 512m
[pack]
    deltaCacheSize = 2047m
    packSizeLimit = 2047m
    windowMemory = 2047m

[http]
    postBuffer = 2147483647
    sslVerify = false
[credential]
    helper = /usr/local/bin/git-credential-gnome-keyring
   
[alias]
    #recent = for-each-ref --sort='-authordate:iso8601' --format='%(authordate:relative)%09%(refname:short)' refs/heads
    recent = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) %(objectname:short) %(contents:subject)' refs/heads/

===============
PYTHON SETUPS :
===============
#Install and Setup Python3.7 and virtual env

# Even though Wayo's laptop comes with Python 3.8, install Python 3.7 
# and setup virtual environment for it as my scripts were written for 3.7.

https://stackoverflow.com/questions/52816156/how-to-create-virtual-environment-for-python-3-7-0

sudo apt-get update
sudo apt-get install build-essential libpq-dev libssl-dev openssl libffi-dev zlib1g-dev
sudo apt-get install python3-pip python3-dev python3.7

# system-wide install and upgrade all packages
sudo pip3.7 install -U virtualenv 
python3.7 -m virtualenv MyEnv37

# Always source this on first rebooting the computer before running any
# python scripts. That is, always work in the python 3.7 environment so
# that you are guaranteed the version of python that you are using coincides
# with what my scripts are expecting:
source MyEnv37/bin/activate

# The bash prompt should change like the below to indicate that the virtual
# environment is indeed successfully activated, and we are within it:
(MyEnv37) rena@PurpleOS:$ 

pip install --upgrade pip

# Verification step:
python --version
pip --version
virtualenv --version

# show packages installed within the virtual environment
pip list

------------------------------------
# Instead of all the below, perhaps do just these instead:

cd ~/Workspace
git clone https://github.com/nuertey/NuerteyPythonScripts.git
cd NuerteyPythonScripts

# This is another shortcut that I should teach you. This shortcut is basically 
# installing all the packages needed way way below form a list that I had
# automatically generated using pip to query all my python scripts to see
# what other packages they need to successfully run. I generated that list,
# requirements.txt from this other pip command in the directory of my scripts:
#
# pip freeze
pip install -r requirements.txt

# Let's get back to the parent workspace:
cd ..
git clone https://github.com/plotly/dash-sample-apps
cd dash-sample-apps
geany README.md

# To see one of the dash sample apps listed in the above README in action:

# The app concerns automatically generating webpages and graphs to visualize
# clinic patient volume by time of the day, waiting time and care score.
# Yeah, we dont write web pages anymore in the future :). We automatically
# generate them from python dash.
cd apps/dash-clinical-analytics
pip install -r requirements.txt
python app.py

# For hardcore higher level python learning, let's do Neural Networks and
# Deep Machine Learning:
# Install the TensorFlow pip package and others:

pip install anaconda libpython theano amadeus
pip install --upgrade tensorflow

# Try it out to verify if install ws successful:
python -c "import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))"

# There are two tensor flow python scripts in NuerteyPythonScripts folder.
# When and if ready for machine learning, run them as follows and peruse what they do.
python tensorflow_beginners_example.py 
python tensorflow_experts_example.py

https://static.latexstudio.net/article/2018/0912/neuralnetworksanddeeplearning.pdf
Neural Networks and Deep Learning
by Michael Nielsen

# This step is important so we do not clone a repo into another repo. Hence why it was important that we create a top-level Workspace directory to house your work in the beginning:
cd ~/Workspace
git clone https://github.com/mnielsen/neural-networks-and-deep-learning
git clone https://github.com/MichalDanielDobrzanski/DeepLearningPython35

Download the free Neural Networks PDF above and github python source code (git clone it) above. Read the PDF leisurely as you have time (thisis way high level so take your time with the basic stuff first) and try the code samples. It will take your python skills to a higher level. The python scripts concern trying to use Neural Networks and Deep Machine Learning to train a model to automatically recognize and classify peoples' handwritings no matter how squiggly.

And in those code samples on github, we simply train the algorithm and model with handwriting samples taken from thousands and thousands of American high school students and stored in a national database, MNIST. The model then "learns" to begin recognizing handwritings, including squiggly ones...

Here is an excerpt from the beginning of the free PDF:

"Neural networks are one of the most beautiful programming paradigms ever invented. In
the conventional approach to programming, we tell the computer what to do, breaking big
problems up into many small, precisely defined tasks that the computer can easily perform.
By contrast, in a neural network we donâ€™t tell the computer how to solve our problem. Instead,
it learns from observational data, figuring out its own solution to the problem at hand.
Automatically learning from data sounds promising. However, until 2006 we didnâ€™t
know how to train neural networks to surpass more traditional approaches, except for
a few specialized problems. What changed in 2006 was the discovery of techniques for
learning in so-called deep neural networks. These techniques are now known as deep
learning. Theyâ€™ve been developed further, and today deep neural networks and deep learning
achieve outstanding performance on many important problems in computer vision, speech
recognition, and natural language processing. Theyâ€™re being deployed on a large scale by
companies such as Google, Microsoft, and Facebook." 

------------------------------------

# If the above instructions work, then probably do not need the below 
# installs anymore. You can now run any of my python scripts and view
# the output, graphs and automatically launched webpages with javascript
# maps, etc.

 9572  pip install urllib3

11323  pip install "gcovr>=4.1"
11324  sudo pip install "gcovr>=4.1"
11325  pip install --upgrade pip
11326  sudo pip install --upgrade pip
17336  pip install psycopg2 
17699  pip install pymc3
17700  pip install --upgrade pip
17724  pip install pymc3
17725  pip install scikit-learn
17726  pip install arviz
17727  pip install pandas
17728  pip install Psycopg2
17731  pip install python-dev
17743  pip install --upgrade pip setuptools
17771  pip install bottle gunicorn
17781  pip install psycopg2
17797  pip install wheel
17798  pip install pandas
17804  pip install pandas-datareader
17806  pip install matplotlib

17813  pip install pandas-gbq
17819  pip install nose
17821  pip install requests
17845  pip install alpha_vantage
17875  pip install bokeh
17877  pip install bokeh.charts
17878  pip install world_bank_data --upgrade
17879  pip install plotly
17892  pip install pycountry
17911  pip install covid
17912  pip install pydantic
17913  pip install covid

17941  python3.7 -m pip install --upgrade pip
17942  pip install --upgrade pip
17945  python3.7 -m pip install pip
17947  pip install virtualenv
17955  pip install covid
17957  pip install --upgrade pip
17962  python3.7 -m pip install --upgrade pip
17970  pip install covid
17971  pip install --upgrade pip
17973  pip install pydantic requests
17978  pip install pandas
17979  pip install plotly matplotlib
17981  pip install pycountry pandas_datareader
17983  pip install COVID19Py
17985  pip install covid
17987  pip install pytest

17996  python -m pip install covid

18148  python -m pip install python3-tk

18258  pip install world_bank_data
18379  pip install alpha_vantage

18416  /home/rena/MyEnv37/bin/python3.7 -m pip install --upgrade pip

18567  pip install nltk
18568  pip install wheel
18569  pip install nltk
18571  pip install networkx
18619  pip install cmake
19031  pip install rebound-cli
19032  pip install beautifulsoup4
19033  pip install html5lib lxml
19034  pip install google_images_download
19126  pip install quandl
19187  pip install datetime
