#***********************************************************************
# @file
#
# Nuertey's first full-blown Dash web application that presents an automatic
# Trading Application dashboard to the user. It effectively allows the user
# to visualize Nuertey's VWAP Stock Trading Algorithm in action. A secondary
# purpose of this script is to illustrate some teaching ideas to Wayo and 
# other dear students.
#
# @note [1] The current news headlines for the chosen country in the drop
#           down list are displayed to the user. Clicking on each headline
#           will open a tab for that news item from the news agency of 
#           concern. 
#
#       [2] Incoming stock trades as captured in the PostgreSQL database
#           are displayed to the user.
#
#       [3] Incoming stock quotes as captured in the PostgreSQL database
#           are displayed to the user.
#
#       [4] Outgoing customer stock orders generated by the VWAP algorithm
#           and captured in the PostgreSQL database are displayed to the
#           user.
#
#       [5] Within the quotes table, good Buys, that is, "Ask prices less
#           than or equal to the current VWAP" will change color from ...
#           to green.
#
#       [6] Within the quotes table, good Sells, that is, "Bid prices 
#           greater than or equal to the current VWAP" will change color
#           from ... to red.
#
#       [7] The rolling VWAP as calculated and captured in the PostgreSQL 
#           database will be plotted and continuously updated for the user.
#               
# @warning  None
#
#  Created: Amidst the rental and job stresses/uncertainties of July 1st, 
#           2020
#   Author: Nuertey Odzeyem
#**********************************************************************/
import os
import sys
import json
import base64
import datetime
import requests
import psycopg2
import pandas as pd

import dash
import dash_core_components as dcc
import dash_html_components as html

import plotly.graph_objects as go
import plotly.express as px

from dash.dependencies import Input, Output, State
from nuertey_news_config import NEWS_API_COUNTRY_CODES

pd.set_option('display.max_rows', 200)
pd.set_option('display.min_rows', 200)
#pd.set_option('display.expand_frame_repr', True)

try:
    print()
    print("Beginning Mr. Nuertey Odzeyem's stock_trading Dash/PostgreSQL database test...")
    print()

    connect_str = "dbname='stock_trading' user='nuertey' host='localhost' " + \
                  "password='krobo2003'"

    connection = psycopg2.connect(connect_str)

    trades = pd.read_sql('select * from trades', connection)
    quotes = pd.read_sql('select * from quotes', connection)
    orders = pd.read_sql('select * from orders', connection)

    country_codes = pd.DataFrame(NEWS_API_COUNTRY_CODES)
    # API Requests for news div
    news_requests = requests.get(
        "https://newsapi.org/v2/top-headlines?sources=bbc-news&apiKey=da8e2e705b914f9f86ed2e9692e66012"
    )

    # API Call to update news
    def update_news():
        json_data = news_requests.json()["articles"]
        df = pd.DataFrame(json_data)
        df = pd.DataFrame(df[["title", "url"]])
        max_rows = 10
        return html.Div(
            children=[
                html.P(className="p-news", children="Headlines"),
                html.P(
                    className="p-news float-right",
                    children="Last update : "
                    + datetime.datetime.now().strftime("%H:%M:%S"),
                ),
                html.Table(
                    className="table-news",
                    children=[
                        html.Tr(
                            children=[
                                html.Td(
                                    children=[
                                        html.A(
                                            className="td-link",
                                            children=df.iloc[i]["title"],
                                            href=df.iloc[i]["url"],
                                            target="_blank",
                                        )
                                    ]
                                )
                            ]
                        )
                        for i in range(min(len(df), max_rows))
                    ],
                ),
            ]
        )

    app = dash.Dash()
    colors = {
        'background': '#111111',
        'text': '#7FDBFF'
    }

    figure2 = go.Figure(data=[go.Scatter(x=[1, 2, 3], y=[4, 1, 2])])

    figure2.update_layout(
        title="Sample Plot Title",
        xaxis_title="testing x",
        yaxis_title="testing y"
    )

    df = px.data.iris() # iris is a pandas DataFrame
    figure3 = px.scatter(df, x="sepal_width", y="sepal_length")

    figure4 = go.Figure()

    figure4.add_trace(go.Scatter(
        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
        y=[0, 1, 2, 3, 4, 5, 6, 7, 8],
        name="Name of Trace 1"       # this sets its legend entry
    ))


    figure4.add_trace(go.Scatter(
        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
        y=[1, 0, 3, 2, 5, 4, 7, 6, 8],
        name="Name of Trace 2"
    ))

    figure4.update_layout(
        title="Plot Title",
        xaxis_title="X-Axis Title (Nuertey)",
        yaxis_title="Y-Axis Title (Odzeyem)",
        font=dict(
            family="Courier New, monospace",
            size=18,
            color="#7f7f7f"
        )
    )

    app.layout = html.Div(style={'backgroundColor': colors['background']}, children=[
        html.H1(
            children='Nuertey Odzeyem\'s Automatic Stock Trading Dash Web Application',
            style={
                'textAlign': 'center',
                'color': colors['text']
            }
        ),
        html.Div(children='Extended application description from header here...', style={
            'textAlign': 'center',
            'color': colors['text']
        }),
        dcc.Graph(
            id='Graph1',
            figure={
                'data': [
                    {'x': [1, 2, 3], 'y': [4, 1, 2], 'type': 'bar', 'name': 'SF'},
                    {'x': [1, 2, 3], 'y': [2, 4, 5], 'type': 'bar', 'name': u'Montr√©al'},
                ],
                'layout': {
                    'plot_bgcolor': colors['background'],
                    'paper_bgcolor': colors['background'],
                    'font': {
                        'color': colors['text']
                    },
                    'title':'Bar Graph of San Francisco Versus Montreal',
                    'xaxis':{
                        'title':'X-Axis Title'
                    },
                    'yaxis':{
                        'title':'Y-Axis Title'
                    }
                }
            }
        ),
        dcc.Graph(
            id='example-graph-2',
            figure=figure2
        ),
        dcc.Graph(id='example-graph-3', 
            figure=figure3
        ),
        dcc.Graph(id='example-graph-4', 
            figure=figure4
        )
    ])

except Exception as e:
    print("Error! Can't connect to database. Invalid dbname, user or password...")
    print(e)

finally:
    if (connection):
        connection.close()
        print("PostgreSQL connection is closed")
        print()

    print("Ending Mr. Nuertey Odzeyem's stock_trading Dash/PostgreSQL database test...")

# Callback to update country of choice for news headlines:
@app.callback(
    dash.dependencies.Output('dd-output-container', 'children'),
    [dash.dependencies.Input('demo-dropdown', 'value')])
def update_output(value):
    return 'You have selected "{}" for top news headlines.'.format(value)

# Callback to update live clock:
@app.callback(Output("live_clock", "children"), [Input("interval", "n_intervals")])
def update_time(n):
    return datetime.datetime.now().strftime("%H:%M:%S")

# Callback to update news:
@app.callback(Output("news", "children"), [Input("i_news", "n_intervals")])
def update_news_div(n):
    return update_news()

if __name__ == "__main__":
    app.run_server(debug=True)
